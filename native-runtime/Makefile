PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

ifeq ($(CC),)
	CC = gcc
endif
ifeq ($(AR),)
	AR = ar
endif

PFS_CORE_FOLDER = $(PROJECT_ROOT)../../PatrFileSys/pfs-core/

PFS_CORE_EXP_FOLDER = $(PFS_CORE_FOLDER)exports/

PFS_LIB_INCLUDE = $(PFS_CORE_EXP_FOLDER)include/

PFS_LIB_FOLDER = $(PFS_CORE_EXP_FOLDER)static/

PFS_LIB_FILE = $(PFS_LIB_FOLDER)libpfs-core.a

BUILD_TARGET_DEBUG = DEBUG_PVM

BUILD_TARGET_RUN = RUN_PVM

BUILD_TARGET_LIB_DEBUG = LIB_DEBUG_PVM

BUILD_TARGET_LIB_RUN = LIB_RUN_PVM

TARGET = pvm

DEBUG_TARGET = db-pvm

LIB_TARGET = libpvm

LIB_DEBUG_TARGET = libdb-pvm

LDFLAGS = -L$(PFS_LIB_FOLDER) -lpfs-core

DEBUG_LDFLAGS = -lpthread

CFLAGS += -I$(PFS_LIB_INCLUDE)

ifeq ($(BUILD_MODE),debug)
	CFLAGS += -g -Og
else ifeq ($(BUILD_MODE),run)
	CFLAGS += -Ofast
else ifeq ($(BUILD_MODE),linuxtools)
	CFLAGS += -g -pg -fprofile-arcs -ftest-coverage
	LDFLAGS += -pg -fprofile-arcs -ftest-coverage
else
    $(error Build mode $(BUILD_MODE) not supported by this Makefile)
endif

BIN_ROOT = $(PROJECT_ROOT)bin/

BINARY_PARENT = $(BIN_ROOT)$(BUILD_MODE)/

BINARY = $(BINARY_PARENT)$(BUILD_TARGET)/

SOURCE = $(PROJEXT_ROOT)src/

OBJS = $(BINARY)pvm-virtual-mashine.o $(BINARY)pvm-main.o

TARGET_WITH_PATH = $(BINARY_PARENT)$(TARGET)

DEBUG_TARGET_WITH_PATH = $(BINARY_PARENT)$(DEBUG_TARGET)

LIB_TARGET_WITH_PATH = $(BINARY_PARENT)$(LIB_TARGET)

LIB_DEBUG_TARGET_WITH_PATH = $(BINARY_PARENT)$(LIB_DEBUG_TARGET)

ifeq ($(BUILD_TARGET),$(BUILD_TARGET_DEBUG))
	CFLAGS += -DPVM_DEBUG
else ifeq ($(BUILD_TARGET),$(BUILD_TARGET_RUN))
else ifeq ($(BUILD_TARGET),$(BUILD_TARGET_LIB_DEBUG))
	CFLAGS += -fPIC -DPVM_DEBUG
else ifeq ($(BUILD_TARGET),$(BUILD_TARGET_LIB_RUN))
	CFLAGS += -fPIC
else ifeq ($(BUILD_TARGET),)
else
	$(error Build target $(BUILD_MODE) not supported by this Makefile)
endif

all:	run debug
	echo FINISHED all

run:	$(TARGET)       $(LIB_TARGET)

debug:	$(DEBUG_TARGET) $(LIB_DEBUG_TARGET)

$(TARGET):	INIT $(PFS_LIB_FILE)
	mkdir -p $(BINARY_PARENT)$(BUILD_TARGET_RUN)
	BUILD_TARGET=$(BUILD_TARGET_RUN) make -C . $(TARGET_WITH_PATH)

$(LIB_TARGET):	INIT $(PFS_LIB_FILE)
	mkdir -p $(BINARY_PARENT)$(BUILD_TARGET_LIB_RUN)
	BUILD_TARGET=$(BUILD_TARGET_LIB_RUN) make -C . $(LIB_TARGET_WITH_PATH)

$(DEBUG_TARGET):	INIT $(PFS_LIB_FILE)
	mkdir -p $(BINARY_PARENT)$(BUILD_TARGET_DEBUG)
	BUILD_TARGET=$(BUILD_TARGET_DEBUG) make -C . $(DEBUG_TARGET_WITH_PATH)

$(LIB_DEBUG_TARGET):	INIT $(PFS_LIB_FILE)
	mkdir -p $(BINARY_PARENT)$(BUILD_TARGET_LIB_DEBUG)
	BUILD_TARGET=$(BUILD_TARGET_LIB_DEBUG) make -C . $(LIB_DEBUG_TARGET_WITH_PATH)

INIT:
	echo BUILD_MODE=$(BUILD_MODE)
	mkdir -p $(BINARY_PARENT)

$(TARGET_WITH_PATH):	$(OBJS)
	$(CC) -o $(TARGET_WITH_PATH) $^ $(LDFLAGS)
	echo FINISHED $(TARGET)

$(LIB_TARGET_WITH_PATH):	$(OBJS)
	$(AR) -rc $(LIB_TARGET_WITH_PATH).ar $(OBJS) $(PFS_LIB_FILE)
	$(CC) -shared -o $(LIB_TARGET_WITH_PATH).so $(OBJS) $(LDFLAGS)
	echo FINISHED $(LIB_TARGET)

$(DEBUG_TARGET_WITH_PATH):	$(OBJS)
	$(CC) -o $(DEBUG_TARGET_WITH_PATH) $^ $(LDFLAGS)
	echo FINISHED $(DEBUG_TARGET)

$(LIB_DEBUG_TARGET_WITH_PATH):	$(OBJS)
	$(AR) -rc $(LIB_DEBUG_TARGET_WITH_PATH).ar $(OBJS) $(PFS_LIB_FILE)
	$(CC) -shared -o $(LIB_DEBUG_TARGET_WITH_PATH).so $(OBJS) $(LDFLAGS)
	echo FINISHED $(LIB_DEBUG_TARGET)

$(BINARY)%.o:	$(SOURCE)%.c
	$(CC) -x c -c $(CFLAGS) -o $@ $<

clean:
	rm -fr $(BIN_ROOT)
