	CMP SP, -1
	JMPNE skip_stack-init
	MOV X00, 1024
	INT INT-MEMORY-ALLOC
	CMP X00, -1
	JMPEQ error_1
	MOV SP, X00
@skip_stack-init
	CALL main
	INT INT-EXIT
#file-POS --POS--
	: CHARS 'UTF-8' "./input/in2.data\0" >
#file-out-POS --POS--
	: CHARS 'UTF-8' "./output/out2-pc.data\0" >
#file-length 8
#file-numbers (file-length / 8)
~IF (file-length % 8 != 0)
	~ERROR {"file-length is not dividable with 8! #file-length=" file-length }
~ENDIF
@main
	MOV X00, file-length
	INT INT-MEMORY-ALLOC
	CMP X00, -1
	JMPEQ error_2
	MOV X03, X00
	#main-GET_IP-POS ((--POS-- + 8)- file-POS)
	MOV X00, IP
	SUB X00, main-GET_IP-POS
	#main-GET_IP-POS ~DEL
	INT INT-STREAMS-NEW_IN
	CMP X00, -1
	JMPEQ error_3
	MOV X01, file-length
	INT INT-STREAMS-READ
	CMP X01, file-length
	JMPNE error_4
	|:	X00: for is_prim: potential-prim
	|	X01: for is_prim: result
	|	X02: for is_prim: free use/?
	|	X03: for is_prim: free use/?
	|	X04: for is_prim: free use/?
	|	X05: memory pointer
	|	X06: loop counter
	|:>
@main-find_prims-loop
	MOV X00, [X05]
	|:	X00: potential prim num
	|
	|	X00 <- ?
	|	X01 <- ?
	|	if prim:
	|		X02 <- NDEC-1
	|	if no prim:
	|		X02 <- mod 0 number |> does not have to be a prim
	|	X03 <- ?
	|	X04 <- ?
	|:>
	CALL is_prim
	MOV [X05], X02
	ADD X05, 8
	INC X06
	CMP X06, file-numbers
	JMPLT main-find_prims-loop
	SUB X05, file-length
	#main-GET_IP-POS ((--POS-- + 8) - file-out-POS)
	MOV X00, IP
	SUB X00, main-GET_IP-POS
	#main-GET_IP-POS ~DEL
	INT INT-STREAMS-NEW_OUT
	CMP X00, -1
	JMPEQ error_5
	MOV X02, X05
	MOV X01, file-length
	INT INT-STREAMS-WRITE
	CMP X01, file-length
	JMPNE error_6
	MOV X00, 0 |> EXIT_SUCCESS
	RET |> main gets called, caller exits

#error-msg-POS --POS--
	: CHARS 'UTF-8' "An error occurred\nI will exit the program now (with exit code 1) (@error_" >
	|> the rest of the message is saved in the first three bytes of DX [num, ')', '\n']
#error-msg-length (--POS-- - error-msg-POS)

@error_1
	MOV X03, HEX-0A2931
	JMP error
@error_2
	MOV X03, HEX-0A2932
	JMP error
@error_3
	MOV X03, HEX-0A2933
	JMP error
@error_4
	MOV X03, HEX-0A2934
	JMP error
@error_5
	MOV X03, HEX-0A2935
	JMP error
@error_6
	MOV X03, HEX-0A2936
@error
	#error-msg-POS-dif ((--POS-- + 8) - error-msg-POS)
	MOV X02, IP
	SUB X02, error-msg-POS-dif
	#error-msg-POS-dif ~DEL
	MOV X01, error-msg-length
	MOV X00, STD-LOG
	INT INT-STREAMS-WRITE
	MOV [X02], X03
	MOV X01, 3
	INT INT-STREAMS-WRITE
	MOV X00, 1
	INT INT-EXIT

|:
|	X00 <- X00
|	X01 <- wurzel(X00)
|	X00 has a natural number wurzel:
|		X02 <- X01 * X01
|	X00 has no natural number wurzel:
|		X02 <- (X01 + 1) * (X01 + 1)
|:>
@wurzel
	MOV X01, 0
@wurzel-loop
	MOV X02, X01
	MUL X02, X02
	CMP X00, X02
	JMPEQ return
	JMPLT wurzel-ret-sub_1
	INC X01
	JMP wurzel-loop
@wurzel-ret-sub_1
	DEC X01
@return
	RET

|:
|	X00: potential prim num
|
|	X00 <- X00
|	X01 <- ?
|	if prim:
|		X02 <- NDEC-1
|	if no prim:
|		X02 <- mod 0 number |> does not have to be a prim
|	X03 <- ?
|	X04 <- ?
|:>
@is_prim
	CALL wurzel
	CMP X00, X02
	JMPEQ return |> BX is already set to the mod zero num
	MOV X02, X00
	AND X02, 1
	JMPZS is_prim-check_2
	MOV X02, 3 |> init check
	|:	X00:			MOD
	|	X01:			wurzel
	|	X02:			check
	|	X03:			DIV
	|	X04:			potential-prim
	|:>
@is_prim-loop
	CMP X02, X01
	JMPGE is_prim-ret-N1
	MOV X03, X04
	MOV X00, X02
	DIV X03, X00
	CMP X00, 0
	JMPEQ return |> X02 is already set to the mod zero num
	ADD X02, 2
	JMP is_prim-loop
@is_prim-check_2
	CMP X00, 2
	JMPEQ is_prim-ret-N1
	MOV X02, 2
	RET
@is_prim-ret-N1
	MOV X02, -1
	RET
