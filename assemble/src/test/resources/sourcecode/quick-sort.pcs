	#DEFAULT_STACK_SIZE 1024
	CMP SP, -1
	JMPNE main
	MOV X00, DEFAULT_STACK_SIZE
@main
	~IF #~FOR_ME
		#MY_INPUT_FILE_POS 0
	~ELSE
		~READ_SYM "[THIS]" #MY_ #ADD~FOR_ME 1
	~ENDIF
	#REL_POS (--POS-- - MY_INPUT_FILE_POS)
	INT INT_LOAD_FILE
	#REL_POS ~DEL
	CMP X00, -1
	JMPEQ error
	ADD X01, X00
	SUB X01, 8
|:	sorts the given array
|	the array starts at X00 and ends at X01
|	X00: points to the first entry of the array
|	X01: points to the last entry of the array
|:>
@SORT
	|:	X00: first entry pointer
	|	X01: last entry pointer
	|	X02: low pointer
	|	X03: high pointer
	|	X04: pivot
	|:>
	|> init
	MOV X02, X00
	MOV X03, X01
	MOV X04, X00
	ADD X04, X01
	RLSH X04, 1
	@SORT_LOOP
		@SORT_LOOP_LOW
			CMP [X02], X04
			JMPGT SORT_LOOP_LOW_END
			CMP X02, X01
			JMPGE SORT_LOOP_END
			ADD X02, 8
			JMP SORT_LOOP_LOW
		@SORT_LOOP_LOW_END
		@SORT_LOOP_HIGH
			CMP [X03], X04
			JMPLT SORT_LOOP_HIGH_END
			CMP X02, X03
			JMPGE SORT_LOOP_END
			SUB X03, 8
			JMP SORT_LOOP_HIGH
		@SORT_LOOP_HIGH_END
			SWAP [X02], [X03]
			JMP SORT_LOOP
	@SORT_LOOP_END
	MVAD X05, X02, -8
	CMP X05, X00
	JMPGE SKIP_LOW_REQ
		PUSH X01
		PUSH X02
		MOV X01, X03
		CALL SORT
		POP X02
		POP X00
	@SKIP_LOW_REQ
	MVAD X05, X02, 8
	CMP X05, X00
	JMPGE SKIP_LOW_REQ
		MOV X00, X03
		CALL SORT
	@SKIP_LOW_REQ
	RET
~IF #~FOR_ME
	#EXP~INPUT_FILE_POS
~ENDIF
:
	CHARS 'UTF-8' "./input/in.data\0"
>
@error
	MOV X00, 1
	INT INT_EXIT
